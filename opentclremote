#!/usr/bin/env python3
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk, Wnck

from socket import (socket, AF_INET, SOCK_DGRAM, SOCK_STREAM, IPPROTO_IP,
    IPPROTO_UDP, IP_ADD_MEMBERSHIP, inet_aton, INADDR_ANY, SOL_SOCKET,
    SO_REUSEADDR, IP_MULTICAST_TTL)
import threading

# Imports required by findTCLtv
import select
import struct
import re
from urllib.request import urlopen

def findTCLtv():
    """The findTCLtv function uses the UPnP protocol to find the IP address of
       the first TCL tv set available.
    """
    # Setup client socket which will send the discovery message
    clnt = socket(AF_INET, SOCK_DGRAM)
    clnt.setsockopt(IPPROTO_IP, IP_MULTICAST_TTL, 2)

    # Setup server socket which will recevie answers to the discovery message
    srvr = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)
    mreq = struct.pack("4sl", inet_aton('239.255.255.250'), INADDR_ANY)
    srvr.setsockopt(IPPROTO_IP, IP_ADD_MEMBERSHIP, mreq)
    srvr.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
    srvr.bind(('', 1900))

    # Send discovery message
    msearch = ("M-SEARCH * HTTP/1.1\r\nHOST:239.255.255.250:1900\r\n"
               "ST:upnp:rootdevice\r\nMAN:ssdp:discover\r\nMX:2\r\n\r\n")
    clnt.sendto(msearch.encode('utf-8'), ('239.255.255.250', 1900))

    # Wait until a Novatek UPnP TV set answers
    srvr.setblocking(0)
    while select.select([srvr], [], [], 3.0)[0]:
        response = srvr.recv(1024).decode('utf-8')

        # The packet must contain a LOCATION field
        location = re.search(r'LOCATION: ([^\r]*)', response)
        if location == None:
            continue

        descUrl = location.group(1)

        # The LOCATION field must contain an IPv4 address
        address = re.search(r'[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+', descUrl)

        if address == None:
            continue

        ipAddress = address.group(0)

        # Download the description according to the LOCATION field
        rsp = urlopen(descUrl).read().decode('utf-8')

        # The description must contain friendlyName and manufacturer tags
        friendlyName = re.search(r'<friendlyName>([^<]*)</friendlyName>', rsp)
        manufacturer = re.search(r'<manufacturer>([^<]*)</manufacturer>', rsp)

        if manufacturer == None or friendlyName == None:
            continue

        if manufacturer.group(1) != 'Novatek':
            continue

        # A TCL tv set has been found!
        srvr.close()
        clnt.close()
        return (ipAddress, friendlyName.group(1))

    srvr.close()
    clnt.close()
    return None

def createAction(keyCode):
    """Given a keyCode, the createAction function generates the XML string
       in the correct format for the TV set.
    """
    message = ('<?xml version="1.0" encoding="utf-8"?>'
               '<root>'
               '<action name="setKey" eventAction="TR_DOWN" keyCode="{}" />'
               '</root>'
              )

    return message.format(keyCode)

class RemoteController:
    """The RemoteController class handles communications between this program
       and the TV set on a local network.
    """
    def __init__(self, host, friendlyName):
        self.sock = socket(AF_INET, SOCK_STREAM)
        self.sock.connect((host, 4123))
        self.keepAlive = None
        self.startKeepAlive()
        self.friendlyName = friendlyName

    def startKeepAlive(self):
        # If a message is not sent regularly, the TV will close the socket
        self.sock.send('nop'.encode('utf-8'))
        self.sock.recv(2048)

        self.keepAlive = threading.Timer(20.0, self.startKeepAlive)
        self.keepAlive.start()

    def close(self):
        if self.keepAlive != None:
            self.keepAlive.cancel()

    def pressKey(self, keyCode):
        # Messages will always be smaller than buffer size
        self.sock.send(createAction(keyCode).encode('utf-8'))
        self.sock.recv(2048)

class RemoteHandlers:
    """The RemoteHandlers class handles events fired by the GUI.
    """
    def __init__(self, remote):
        self.remote = remote

        # The following keys cannot be specified as accelerators
        self.keys = {
            Gdk.KEY_Up: 'TR_KEY_UP',
            Gdk.KEY_Down: 'TR_KEY_DOWN',
            Gdk.KEY_Left: 'TR_KEY_LEFT',
            Gdk.KEY_Right: 'TR_KEY_RIGHT',
            Gdk.KEY_Escape: 'TR_KEY_EXIT',
            Gdk.KEY_BackSpace: 'TR_KEY_BACK',
        }
    
    def onDeleteWindow(self, *args):
        self.remote.close()
        Gtk.main_quit(*args)

    def onKeyPressed(self, widget, event):
        # Handles specific keys in a non standard way
        if event.keyval in self.keys:
            self.remote.pressKey(self.keys[event.keyval])
            return True

    def onButtonClicked(self, button):
        # Dirty trick: use the graphic name as the key code
        self.remote.pressKey(button.get_name())

class RemoteGUI:
    """The RemoteGUI class is responsible of loading and displaying the GUI.
    """
    def __init__(self, remote):
        self.builder = Gtk.Builder()
        self.builder.add_from_file("ui/opentclremote.glade")

        self.winRemote = self.builder.get_object("winRemote")
        lblFriendlyName = self.builder.get_object("lblFriendlyName")
        lblFriendlyName.set_text(remote.friendlyName)
        self.builder.connect_signals(RemoteHandlers(remote))

    def run(self):
        self.winRemote.show_all()
        Gtk.main()

def activateOpenTCLRemoteWindow():
    """The activateOpenTCLRemoteWindow function looks for an instance of the
       OpenTCLRemote window and activates it (gives it the focus) if found.
       Returns True if found, False if not found
    """
    screen = Wnck.Screen.get_default()
    screen.force_update()
    found = False

    for window in screen.get_windows():
        if window.get_name() == 'OpenTCLRemote':
            # 0 generates the following warning but it works whereas other
            # values that I have tried do not work
            # Wnck-WARNING **: Received a timestamp of 0; window activation may
            # not function properly.
            window.activate(0)
            found = True
            break

    window = None
    screen = None
    Wnck.shutdown()

    return found

if __name__ == "__main__":
    if not activateOpenTCLRemoteWindow():
        tv = findTCLtv()
        if tv != None:
            remote = RemoteController(tv[0], tv[1])
            RemoteGUI(remote).run()

